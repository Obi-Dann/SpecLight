<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ assembly name="System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".designer.cs" #>
<#
    var declarations = from kvp in new Dictionary<string, string>
    {
        {"Given", "The given part describes the state of the world before you begin the behavior you're specifying in this scenario (like Arrange in AAA). The purpose of givens is to put the system in a known state before the user (or external system) starts interacting with the system (in the When steps). Avoid talking about user interaction in givens. If you had worked with usecases, you would call this preconditions."},
        {"When", "What are the behaviours that happen to the SUT that we want to specify (Act). The purpose of When steps is to describe the key action the user performs (or, using Robert C. Martin’s metaphor, the state transition)."},
        {"Then", "The then section describes the changes you expect due to the specified behavior (Assert). The purpose of Then steps is to observe outcomes. The observations should be related to the business value/benefit in your feature description. The observations should also be on some kind of output – that is something that comes out of the system (report, user interface, message) and not something that is deeply buried inside it (that has no business value)."},
        {"And", "Add an additional Given, When or Then clause"},
    }
        from a in Enumerable.Range(0, 8)
        select new StepDeclaration(a, kvp.Key, kvp.Value);

    //write the ExternalAnnotations file - enabling resharper to warn users when they forget to call Execute or wait on ExecuteAsync

    var annotationMembers = from c in new[]
                            {
                                "IAsyncSpec.{0}",
                                "IAsyncSpec.{0}Async",
                                "Spec.{0}",
                                "Spec.{0}Async",
                                "Spec.SpecLight#IAsyncSpec#{0}",
                            }
                            from d in declarations
                            select d.BuildMethodDecl(c);

    annotationMembers = annotationMembers.Concat(new[] {"M:SpecLight.IAsyncSpec.ExecuteAsync(System.String)", "M:SpecLight.Spec.ExecuteAsync(System.String)"});

    var doc = new XDocument(new XElement("assembly",
        new XAttribute("name", "SpecLight"),
        annotationMembers.Select(x => new XElement("member",
            new XAttribute("name", x), new XElement("attribute", new XAttribute("ctor", "M:JetBrains.Annotations.PureAttribute.#ctor"))))));

    doc.Save(Host.ResolvePath("SpecLight.ExternalAnnotations.xml"));

#>
using SpecLight.Infrastructure;
using System;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;

namespace SpecLight
{
#pragma warning disable 1573
#pragma warning disable 1998
    public partial class Spec
    {
<#


    foreach (var d in declarations)
    {
#>

<#=d.Comment#>
        public Spec <#=d.ScenarioBlock #><#=d.TypeDeclaration #>(Action<#=d.TypeDeclaration #> action<#= d.TypedParameters #>)
        {
            AddStep(ScenarioBlock.<#=d.ScenarioBlock #>, StringHelpers.CreateText(action.Method, new object[]{<#=d.ParameterValues#>}), async () => action(<#=d.ParameterValues #>), () => action(<#=d.ParameterValues #>), action, new object[]{<#=d.ParameterValues#>});
            return this;
        }

<#=d.Comment#>
        IAsyncSpec IAsyncSpec.<#=d.ScenarioBlock #><#=d.TypeDeclaration #>(Action<#=d.TypeDeclaration #> action<#= d.TypedParameters #>)
        {
            AddStep(ScenarioBlock.<#=d.ScenarioBlock #>, StringHelpers.CreateText(action.Method, new object[]{<#=d.ParameterValues#>}), async () => action(<#=d.ParameterValues #>), () => action(<#=d.ParameterValues #>), action, new object[]{<#=d.ParameterValues#>});
            return this;
        }

<#=d.Comment#>
        public IAsyncSpec <#=d.ScenarioBlock #>Async<#=d.TypeDeclaration #>(Func<#=d.AsyncTypeDeclaration #> action<#= d.TypedParameters #>)
        {
            AddStep(ScenarioBlock.<#=d.ScenarioBlock #>, StringHelpers.CreateText(action.Method, new object[]{<#=d.ParameterValues#>}), () => action(<#=d.ParameterValues #>), null, action, new object[]{<#=d.ParameterValues#>});
            return this;
        }


<#
    }
#>
    }

    public partial interface IAsyncSpec
    {
<#


    foreach (var d in declarations)
    {
#>

<#=d.Comment#>
        IAsyncSpec <#=d.ScenarioBlock #><#=d.TypeDeclaration #>(Action<#=d.TypeDeclaration #> action<#= d.TypedParameters #>);

<#=d.Comment#>
        IAsyncSpec <#=d.ScenarioBlock #>Async<#=d.TypeDeclaration #>(Func<#=d.AsyncTypeDeclaration #> action<#= d.TypedParameters #>);

<#
    }
#>
    }
#pragma warning restore 1573
#pragma warning restore 1998

}

<#+

    public class StepDeclaration
    {
        readonly string _description;
        readonly IEnumerable<int> _eachTypeArgument;


        public StepDeclaration(int typeArguments, string scenarioBlock, string description)
        {
            TypeArguments = typeArguments;
            ScenarioBlock = scenarioBlock;
            _description = description;
            _eachTypeArgument = Enumerable.Range(1, TypeArguments);
        }

        public string ScenarioBlock { get; private set; }
        public int TypeArguments { get; private set; }

        public string TypeDeclaration
        {
            get { return TypeArguments == 0 ? "" : "<" + string.Join(", ", _eachTypeArgument.Select(x => "T" + x)) + ">"; }
        }

        public string AsyncTypeDeclaration
        {
            get { return TypeArguments == 0 ? "<Task>" : "<" + string.Join(", ", _eachTypeArgument.Select(x => "T" + x).Concat(new[]{"Task"})) + ">"; }
        }

        public string TypedParameters
        {
            get { return TypeArguments == 0 ? "" : string.Concat(_eachTypeArgument.Select(x => string.Format(", T{0} p{0}", x))); }
        }

        public string ParameterValues
        {
            get { return string.Join(", ", _eachTypeArgument.Select(x => "p" + x)); }
        }

        public string Comment
        {
            get
            {
                return string.Format(@"        /// <summary>
        /// {0}
        /// </summary>
        /// <remarks>
        /// Be sure to describe the behaviour not the implementation.
        /// This overload infers its text from the name of the parameter <paramref name=""action""/>
        /// </remarks>
        /// <param name=""action"">
        /// A descriptively named method that should be run to fulfil this story fragment. The method's name will be used as the description for this fragment, once converted from CamelCase
        /// Any underscores in the method's name will be used as placeholders and will be replaced with the <see cref=""object.ToString""/> of each respective argument.
        /// Do not use a lambda or anonymous method here, as the name will not be human readable
        /// </param>", _description);
            }
        }

        public string BuildMethodDecl(string template)
        {
            var name = "M:SpecLight." + string.Format(template, ScenarioBlock);
            string nums = string.Join(",", _eachTypeArgument.Select(x => "``"+(x-1)));
            if (template.EndsWith("Async"))
            {
                var p = TypeArguments == 0 ? "(System.Func{System.Threading.Tasks.Task})" : string.Format("``{0}(System.Func{{{1},System.Threading.Tasks.Task}},{1})", TypeArguments, nums);
                return name + p;
            }
            else
            {
                var p = TypeArguments == 0 ? "(System.Action)" : string.Format("``{0}(System.Action{{{1}}},{1})", TypeArguments, nums);
                return name + p;
            }

        }
    }



#>
